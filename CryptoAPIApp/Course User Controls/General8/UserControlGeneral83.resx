<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label2.Text" xml:space="preserve">
    <value>While digital signature is a technical term, defining the result of a cryptographic process that can be used to
authenticate a sequence of data, the term electronic signature -- or e-signature -- is a legal term that is defined
legislatively. For example, in the United States, the term was defined in the Electronic Signatures in Global and
National Commerce Act, passed in 2000, as meaning "an electronic sound, symbol, or process, attached to or
logically associated with a contract or other record and executed or adopted by a person with the intent to sign
the record.". This means that a digital signature which can be expressed digitally in electronic form and associated
with the representation of a record can be a type of electronic signature. More generally, though, an electronic
signature can be as simple as the signer's name being entered on a form on a webpage.

To be considered valid, electronic signature schemes must include three things:
 • a way to verify the identity of the entity signing it;
 • a way to verify that the signing entity intended to affirm the document being signed; and
• a way to verify that the electronic signature is indeed associated with the signed document.

A digital signature can, on its own, fulfill these requirements to serve as an electronic signature:
 • the public key of the digital signature is linked to the signing entity's identification;
 • the digital signature can only be affixed by the holder of the public key's associated private key, which implies
    the entity intends to use it for the signature; and
 • the digital signature will only authenticate if the signed data -- document or representation of a document --
   is unchanged. If a document is altered after being signed, the digital signature will fail to authenticate.
</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="circularButton2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAO
        xAAADsQBlSsOGwAAAVNJREFUSEutlc9qwkAQxpcg4lH6hEVKj75I8SAiPYgP0IOnIj30uXooYuLvW2ZD
        DBv/zOaDjxki85udjdkNQ2qaJtR1/Yo3eGKPx5HB34l/uCHfEmb2c5kExwug/4JL5GeCmpRNAqDCS3wC
        Sojwrvc88jeheIoPAg+JJhuCf7sonuMfwXKiwdmaFE0yAxKbEKP7OdphfxNAmuQ7ovLSJGti8XYdO6vu
        TqBc/641cdzt6hqpyScu3q6jaAPSdq2IUyt5XhS/APm1VUf1ck2yIvomofiqgWIvV4MPXFnJ46L45hYZ
        3LdFFLUvWdJqkyz3v2SK5oInqGIvF1zfwvNwiu99aJLvXFIRDbLnUZoA7ch9K8ft16uYybdEF3xC8ZcI
        OSU49p0/FFZAlvgkUka6cPxfqwRcjd5wvDK1arNWXgZPAiS3lz4a79JPAqhpFgb3nS8hhAuilVl7syWM
        cwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="circularButton1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAO
        xAAADsQBlSsOGwAAAV5JREFUSEutlcFqwkAURUMQybL0C0tx4cofKaVIcVGkXyBdiXRR+lkuREw8d3iv
        TCJTkhkPXN5DvXcmb0xS5dJ13Qy9oydkn94JAhsLF8e2bZdU+7YQgrTzDbog54QWLGS/yoSQGSFb1LmE
        9WfaFart59PA2BDiY0nxheZmGQ/B4UCpF+1WqA76b9oHs4wHk8bygUL4ULaAwhuzjAejxrLGHB9oD77f
        U7J3/ob+xiIGfdFYNh7uoYM+byyY5ugVJccCB/RolvFgqtELu/tvLL+U6eECY01AbwHVuIcflLeAwBxG
        pEWUlkAjmn64DuZwyNSbRfxqIO+QHYJu/qaqcQ95f1MHsx7Lay2itAR5N5qDWVeyDVHgVyCivmxcmHs3
        nlCNeyg+eI1LB5+EhXaU6Y9rB7Me258KE34Fgr7sheMQ4OOKR6RwvTLLwh3C4nEd0f1e+g6B4eXPrp/T
        4VV1BSFUWW4GsgSrAAAAAElFTkSuQmCC
</value>
  </data>
</root>