<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="circularButton2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAO
        xAAADsQBlSsOGwAAAVNJREFUSEutlc9qwkAQxpcg4lH6hEVKj75I8SAiPYgP0IOnIj30uXooYuLvW2ZD
        DBv/zOaDjxki85udjdkNQ2qaJtR1/Yo3eGKPx5HB34l/uCHfEmb2c5kExwug/4JL5GeCmpRNAqDCS3wC
        Sojwrvc88jeheIoPAg+JJhuCf7sonuMfwXKiwdmaFE0yAxKbEKP7OdphfxNAmuQ7ovLSJGti8XYdO6vu
        TqBc/641cdzt6hqpyScu3q6jaAPSdq2IUyt5XhS/APm1VUf1ck2yIvomofiqgWIvV4MPXFnJ46L45hYZ
        3LdFFLUvWdJqkyz3v2SK5oInqGIvF1zfwvNwiu99aJLvXFIRDbLnUZoA7ch9K8ft16uYybdEF3xC8ZcI
        OSU49p0/FFZAlvgkUka6cPxfqwRcjd5wvDK1arNWXgZPAiS3lz4a79JPAqhpFgb3nS8hhAuilVl7syWM
        cwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="circularButton1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAO
        xAAADsQBlSsOGwAAAV5JREFUSEutlcFqwkAURUMQybL0C0tx4cofKaVIcVGkXyBdiXRR+lkuREw8d3iv
        TCJTkhkPXN5DvXcmb0xS5dJ13Qy9oydkn94JAhsLF8e2bZdU+7YQgrTzDbog54QWLGS/yoSQGSFb1LmE
        9WfaFart59PA2BDiY0nxheZmGQ/B4UCpF+1WqA76b9oHs4wHk8bygUL4ULaAwhuzjAejxrLGHB9oD77f
        U7J3/ob+xiIGfdFYNh7uoYM+byyY5ugVJccCB/RolvFgqtELu/tvLL+U6eECY01AbwHVuIcflLeAwBxG
        pEWUlkAjmn64DuZwyNSbRfxqIO+QHYJu/qaqcQ95f1MHsx7Lay2itAR5N5qDWVeyDVHgVyCivmxcmHs3
        nlCNeyg+eI1LB5+EhXaU6Y9rB7Me258KE34Fgr7sheMQ4OOKR6RwvTLLwh3C4nEd0f1e+g6B4eXPrp/T
        4VV1BSFUWW4GsgSrAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>In 2017, the National Institute of Standards and Technology (NIST) in the U.S. launched an international multi-year
Post-Quantum Cryptography (PQC) competition to select cryptographic systems for the future.  A post-quantum
cryptosystem is one which is not known to be breakable in polynomial time (described above) by a full-scale
quantum computer. There are currently five main proposals for post-quantum systems using hard math problems,
each of which has been studied for a decade or more:
Code-based systems based on the difficulty of decoding random linear codes

An example of a linear expression in one variable is: 10 + 3x. Linear codes consist of code words, but instead of
using simple components in a codeword such as ‘a’ or ‘b’, each component is far more complex: a multivariable
linear expression – a complex mathematical phrase – of the input. Given a vector where some of the entries are
wrong (there is an ‘error’), the decoding challenge is to find the closest codeword.
Multi-variate cryptosystems based on the difficulty of solving systems of many non-linear equations in many
variables

An example of a non-linear equation in several variables is: y = 2x3z+ 3x2 w + z2w2 Current proposals are based
on scores of equations in scores of variables.
Lattice-based systems based on the hardness of finding short vectors in lattices
Regularly-spaced grids of points stretching out to infinity. Think of a polka dot shirt for a basic example in two
dimensions, but typical systems might use lattices in thousands of dimensions. Lattices are typically described
in terms of a set of vectors (objects with both a magnitude and direction) which generate the whole lattice
(basis vectors). However, it can be exponentially hard to find a short combination of those basis vectors.
</value>
  </data>
</root>